Objetos de Aprendizagem Móveis para Ensino de Dedução
Natural na Lógica Proposicional
Marcel Mossman¹, Lucas dos S. Gomes¹, João Carlos Gluz¹
¹Programa de Pós-Graduação em Computação Aplicada
Universidade Vale dos Sinos (UNISINOS) - São Leopoldo - RS - Brasil
marcelmossman@gmail.com, lucas.gomes.rs@hotmail.com, jcgluz@unisinos.br
Abstract.Logic is fundamental for Computer Science and Information Systems
students, helping them to develop logical analysis and problem solving skills.
Heraclito aims to create computational system based on learning objects that
will  help  students  to  learn  natural  deduction  in  propositional  logic.  The
Heraclito will help students to properly use all the rules of natural deduction,
showing  them  how  they  can  overcome  their  mistakes,  contributing  to  an
improvement of the framework of dropouts and failures. The present work
show  the  technical  features  of  Heraclito's  proof  editors:  the  mobile  proof
editor, and the desktop/laptop version. The work also show the functional tests
made with these prototypes.
1.  Introdução
A disciplina de Lógica é fundamental para a formação dos alunos de Computação e
Informática, ajudando-os na desenvolvimento de suas habilidades de análise lógica de
requisitos,  além  da  formalização  e  resolução  de  problemas  computacionais.  Dados
estatísticos apontam para índices muito altos de   reprovação e desistência na disciplina
de Lógica,   passando de um total de 61% de aprovação em cursos presenciais para um
mínio de apenas 23% de aprovação em cursos de EAD (Penteado e Gluz, 2011).
O Sistema Heráclito (Penteado e Gluz, 2011) pretende contribuir com a eventual
melhoria  deste  quadro  de  desistências  e  reprovações,  fornecendo  mecanismos
inteligentes de tutoria para o ensino da dedução natural na Lógica Proposicional, que é
um dos momentos mais críticos no processo de ensino da disciplina de Lógica. Este
sistema  integra  as  tecnologias  de  Sistemas  Tutores  Inteligentes  e  Objetos  de
Aprendizagem no domínio de ensino de Lógica, provendo objetos de aprendizagem
com capacidades de tutoria que auxiliarão os alunos à provar argumentos da Lógica
Proposicional usando corretamente as regras da Dedução Natural.
Os  objetos  do  Heráclito  estão  alinhados  aos  métodos  de  ensino  de  Lógica,
particularmente no ensino das técnicas de dedução, onde é fundamental a resolução com
acompanhamento  pedagógico  de  uma  série  extensa  de  exercícios  de  prova  de
argumentos. Silvestre  (2010), por  exemplo,  traz  como estratégias de  aprendizagens
efetivas para a Lógica, estratégias básicas compostas pela exposição do conteúdo, com
exemplos específicos e a resolução de vários exercícios propostos. Nolt e Rohatyn
(1991) também consideram fundamental a resolução de uma ampla gama de exercícios
para a assimilação dessas técnicas.
O  presente  trabalho  apresenta  os  resultados  iniciais  do  Sistema  Heráclito,
incluindo a apresentação dos protótipos de Editor de Prova voltados para dispositivos
móveis  e  para  computadores  pessoais,  além  dos  primeiros  resultados  dos  testes
funcionais desse sistema.
Anais do 23º Simpósio Brasileiro de Informática na Educação (SBIE 2012), ISSN 2176-4301
Rio de Janeiro, 26-30 de Novembro de 2012




O investimento em uma interface para dispositivos móveis se justifica, porque,
em nossa opinião, além de possuir uma disseminação maior (pelo menos no caso dos
smartphones), essa interface pode oferecer possibilidades de interação mais intuitivas
que a interface para computadores pessoais imitando, até certo ponto, o uso de um
caderno de notas com contato direto com a demonstração sendo elaborada.
2.  Metodologia
O Sistema Heráclito está integrado na infraestrutura de agentes MILOS (Gluz e Vicari,
2010),  que  visa  apoiar  os  processos  de  ensino  através  do  uso  de  objetos  de
aprendizagem compatíveis com a proposta de metadados OBAA (Bez et al., 2010). O
Heráclito  se  caracteriza  como  protótipo  inicial  de  um  objeto  inteligente  de
aprendizagem. Ferramentas futuras irão permitir que o professor ou designerde OAs
possa customizá-lo com listas de exercícios específicas para uma dada disciplina ou
turma, material explanatório adicional, exemplos de dedução, além da possibilidade de
configurar o próprio   processo automatizado de tutoria.
O sistema Heráclito é dividido em uma aplicação cliente e em um servidor. O
cliente  Heráclito  executa  tanto  em  computadores  pessoais  quanto  em  dispositivos
móveis. Essa aplicação cliente oferece a funcionalidade de um editor de provas de
argumentos  da  Lógica  Proposicional,  que  suporta  todas  as  regras  de  inferência  da
dedução natural. Esse editor pode ser usado tanto em conjunto com o servidor Heráclito
ou sem ele. O servidor Heráclito, quando disponível, oferecerá serviços de tutoria para
ajudar o aluno a resolver exercícios de prova de argumentos.
O cliente Heráclito está sendo desenvolvido em Java. A versão para computador
pessoal (desktopou laptop) foi desenvolvida no ambiente NetBeans(Oracle, 2012) e
sua interface gráfica com a biblioteca Swing. A versão para o sistema Android (Google,
2012) é desenvolvida no ambiente Eclipse (Eclipse, 2012), usando a interface XML e o
kit  de  desenvolvimento  Android   (SDK).  Inicialmente  desenvolvido  para  desktop,  a
versão móvel foi criada através de uma reengenharia desse código porque a biblioteca
Swing não está disponível no Android, sendo necessária a reescrita do código visual.
3.  Sistema Heráclito
A interface principal contém quatro botões, onde cada um leva a uma determinada
atividade, seja provar um novo argumento, ler exemplos de argumentos já provados,
abrir uma prova salva anteriormente, ou ler o manual do aplicativo. O botão  “Nova
Prova” leva ao editor de provas: o aluno seleciona o argumento a ser provado pela lista
de argumentos disponíveis. O botão “Exemplo de Teoremas” mostra um conjunto de
argumentos  já  provados,  com  vários  níveis  de  dificuldade.  O  botão  “Abrir  Provas
Existentes” permite carregar uma prova de argumento anteriormente salva,.
3.1.  Interface para Computador Pessoal
A interface do editor de provas                                                               (Fig. 1) é baseada em botões,   uma lista contendo o
desenvolvimento da prova, um seletor de provas, a legenda esclarecendo a descrição das
regras. O quadro inferior de cor azul representa as mensagens tanto do sistema quanto
dos agentes tutores existentes no servidor Heráclito. Se a mensagem for crítica, será
exibida em um pop-up.
O editor de provas do Heráclito suporta oito regras básicas de inferência não-
hipotética (Nolt e Rohatyn, 1991): MP (modus ponenş) DN (dupla negação ou elim. da
negação), CJ (introd. da conjunção), SP (separação ou elim. da conjunção), AD (adição
ou introd. da disjunção), -DJ (elim. da disjunção), +EQ (introd. da equivalência ou do




bicondicional) e -EQ (elim. da equivalência ou do bicondicional). O editor suporta duas
regras hipotéticas: RAA (redução ao absurdo) e PC (prova condicional), além das regras
derivadas: MT (modus tolens), SH (silogismo hipotético), SD (silogismo disjuntivo),
DC (dilema construtivo), INC (inconsistência) e EXP (exportação).
Figura 1. Interface do Editor de Provas para Computador Pessoal
Por intermédio dos botões o aluno primeiro seleciona a regra desejada, seja ela
básica ou derivadas, e logo após seleciona as linhas nas quais as regras terão efeito.
Caso  esteja  correto  o  uso  da  regra,  uma  nova  linha  é  criada,  com  o  resultado  da
aplicação da regra. Essa ação é repetida até o argumento ser totalmente provado.
3.2.  Interface Móvel
A interface para dispositivos móveis foi baseada na interface desktop. (Fig. 2).
Figura 2. Interface do Editor de Provas para Dispositivos Móveis
Todo o processo de interação é feito através de toques com os dedos diretamente
nos botões do editor. O aluno toca no botão correspondente a regras de dedução que
pretende usar. Isso é indicado em verde (no caso da Fig. 2, foi selecionado a regra MP -
Modus Ponens). Posteriormente o aluno toca nas linhas de demonstração que serão
usadas pela regras. As linhas que estão sendo utilizadas pela regra são indicadas na cor
azul (Fig. 2).   Se as linhas selecionadas estiverem corretas uma nova linha é adicionada




ao fim da prova. No caso da Fig. 2, se o aluno, após selecionar a linha 2, selecionar a
linha 4, então por MP, aparecerá a linha 5 contendo a fórmula A e a referência MP 2,4.
4.  Arquitetura
O Sistema Heráclito completo é projetado como um sistema multiagente composto por
três agentes distintos, que rodam no servidor Heráclito, e por um editor de provas (o
cliente Heráclito) que roda em computadores pessoais e dispositivos móveis (Fig. 3).
Figura 3. Arquitetura Geral do Sistema Heráclito.
O agente de mediação é responsável pelo acompanhamento de todo o processo
de tutoria, o agente especialista em dedução natural é responsável pela análise das
provas  realizadas  pelos  alunos  e  o  agente  modelo  do  aluno  é  responsável  pelo
acompanhamento da interação com o aluno. Os agentes são construídos em base da
plataforma JADE usando o padrão FIPA para comunicação entre si e também com o
editor de provas.   Para intercomunicação entre os agentes do Heráclito e o editor de
provas que roda como aplicação cliente nos dispositivos dos alunos, foi desenvolvido
uma facilidade de comunização (um gateway) entre a plataforma JADE e os protocolos
e mensagens empregados nos Web Services. Para mais referências sobre a arquitetura
de agentes, consultar (Penteado e Gluz, 2011).
5.  Testes
Inicialmente foram realizados testes funcionais em laboratório tanto da aplicação cliente
para computadores pessoais quanto para dispositivos móveis. Estes testes validaram a
todas as operações da interface de usuário, sendo testada a aplicação de todas as regras
de  inferência  da  dedução  natural.  Assim,  testes  em  laboratório  comprovam  a
funcionalidade  do  Editor  de  Provas,  auxiliando  o  aluno  na  correta  resolução  do
argumento a ser provado.
Para verificar se a comunicação entre a aplicação cliente e o servidor Heráclito,
primeiro  foram  realizados  testes  de  envio  e  recebimento  de  mensagens  entre  dois
agentes no mesmo computador. Logo a seguir foram realizados testes similares porém
em diferentes computadores. Para verificar a interoperabilidade do Sistema Heráclito
em distintos Sistemas Operacionais, esses testes de comunicação foram executados
tanto  no  sistema  Windows quanto  no  sistema  Linux/Ubuntu.  Atualmente  se  está




procedendo  aos  testes  de  integração  dos  agentes  tutores  e  da  comunicação  destes
agentes com os editores de prova. O sistema   como um todo será testado no segundo
semestre de 2012. Espera-se que ele possa entrar em operação em aulas presenciais ou
de EAD, incluindo o suporte à tablets, já no início de 2013.
6.  Conclusão
O Heráclito é  projetado  como  um  sistema  complementar à  atividade do  professor,
visando  ajudar  tanto  o  professor  como  o  aluno,  de  nenhuma  forma  substituindo  a
necessidade desse processo de interação entre aluno e professor. A disciplina de Lógica
é fortemente dependente da resolução de muitas e extensas listas de exercícios. Espera-
se que o Heráclito possa auxiliar os alunos com dificuldade na matéria, e diminuir a
carga do professor diante de solicitações de ajuda de dezenas (ou mais) de alunos nos
inúmeros exercícios de  prova  de argumentos.  Ao  invés de  recorrer  diretamente  ao
professor, o aluno poderá sanar algumas de suas dúvidas com o Heráclito, podendo
avançar em seu aprendizado através do uso do programa.
Na versão final do sistema será possível a customização da aplicação cliente
pelo professor, permitindo que o professor defina quais exercícios serão incluídos, quais
regras estarão disponíveis aos alunos, que informações adicionais são necessárias para
sua resolução e se a tutoria estará disponível ou não para ajudar o aluno a utilizar
determinadas regras. O nível de tutoria também poderá ser determinado (por exemplo, o
sistema pode fornecer a resposta final ou não). Como resultado dessa customização será
gerado um pacote contendo a aplicação cliente e os parâmetros da customização. Este
pacote forma um objeto de aprendizagem Heráclito.
Espera-se que a versão móvel seja mais difundida devido ao crescente uso de
tablets/smartphones, criando assim, uma maneira simples de aprender disponível em
sua mão, sem a necessidade de equipamentos maiores. Atualmente uma pequena parcela
de estudantes possuem smartphonesAndroid, mas, essa é uma parcela de crescimento
muito alto, permitindo um maior acesso dos OAs Heráclito pelos alunos.
7.  Agradecimentos
Os autores agradecem ao MCT/FINEP/MC/FUNTTEL, a CAPES e ao CNPQ pelo
financiamento dessa pesquisa.
Referências
Google Inc. Android. 2012. Disponível em <http://developer.android.com/>.
Bez, M.; Vicari, R. M.; Silva, J. M.; Ribeiro, A.; Gluz, J. C.; Passerino, L. M.; Santos, E.;
Primo, T.; Rossi, L.; Behar, P.; Filho, R.; Roesler, V. Proposta Brasileira de Metadados para
Objetos de Aprendizagem Baseados em Agentes (OBAA). RENOTE. 2010, v.8, p.1 - 10.
Gluz,  J.  C.;  Vicari,  R.  M.  MILOS:  Infraestrutura  de  Agentes  para  Suporte  a  Objetos  de
Aprendizagem OBAA. Anais do XXI SBIE, João Pessoa, 201o.
Penteado,  F;  Gluz,  J.C.;                                                                           (2011)                                                                                     “Sistema  Heráclito:  Suporte  a  Objetos  de  Aprendizagem
                                                                                                      Interativos e Dialéticos Voltados ao Ensino de Dedução Natural na Lógica Proposicional”.
Anais do SBIE 2011, Aracaju, 2011
Silvestre, Ricardo S. Um Curso de Lógica. Vozes, São Paulo, 2010
Eclipse Foundation. Eclipse - The Eclipse Foundation open source community website. 2012.
Disponível em <http://www.eclipse.org>
Nolt, H; Rohatyn, D. Lógica. Makron Books, São Paulo, 1991.
Oracle Inc. Welcome to NetBeans. 2012. Disponível em <http://netbeans.org>





