!"#$%&'()(*(+,#$%-.$/#0#$.1(,($.($-&2&34(*4,"&3'($
5&",6.7'("8',9($)&$5,2'&"#2$%7*',6.+&3'&2                                                   $
:#0*(2$;)7#0)($/#3'(<#=>$?,9#0)($:@(0&3!$
"#$%$&'()*±*+,$-*./01*%234526/*±*708*9/08*(/4:2;/*<1*=3>0:321?*"@AA*±*./01*
%234526/*±*()*±*B21C3>*
!
D,C;3;5;/*E3>3;12*<:*$,6:,F1231*±*DE$'()*±*GH1*9:,*&34I2J3/*KA*±*(3/*<:*)1,:32/*±*
!!!LAM!@A*±*()*±*B21C3>*
!"#$%&"'()*)$+,&-.,/0(1%,)#'23)-).-.,0
!"#$%&'$(!"#$%!&'&()!&)(%(*+%!'!,-.!/(+#0102034!50)!,.6!1(7(20&/(*+!+#'+!
8%(%! /01(2%! $*! 1$55                                                                      ()(*+! '9%+)':+$0*! 2(7(2%;! 30$*3! 5)0/! %4%+(/! %&(:$5                 $:'+$0*;!
'*1! '5+()! '! +)'*%50)/'+$0*! %(+! 9(+<((*! /01(2%;! 3(+! +0! +#(! %&(:$5$:! &2'+50)/!
=.6>?@,0$%(A! :01                                                                           $5$:'+$0*B! "#(! /(+#0102034! 8%(%! +#(! C.,D! '%! &2'+50)/!
$*1(&(*1(*+! /01(2;! <#$:#! $%! '! /(+'/01(2! +#'+! (*3209(%! +#(! :0*:(&+%! 05!
%(7()'2! '3(*+E0)$(*+(1! /(+#010203                                                         $(%! 50)! ,.6! 1(7(20&/(*+! $*+0! '! %$*32(!
/01(2B! .%! &2'+50)/! %&(:$5$:! /01(2;! +#(! ='F',0! /01(2! <'%! :#0%(*B! "#(!
+)'*%50)/'+$0*%! 9(+<((*! &2'+50)/! $*1(&(*1(*+! /01(2! '*1! &2'+50)/! %&(:$5$:!
/01(2! ')(! &)03)'//(1! $*! GH"! 2'*38'3(! '*1! +)'*%50)/'+$0*%! 9(+<((*!
&2'+50)/! %&(:$5$:! /01(2!'*1! +#(! (I(:8+$0*!&2'+50)/!')(!&)03)'//(1! $*! ,J"!
2'*38'3(B!"#$%!&'&()!'2%0!&)(%(*+%!'!,.6!1(7(20&/(*+!(*7$)0*/(*+;!<#$:#!$%!
'!%(+!05!K:2$&%(!&283E$*%!'*1!+#(!L021!,$*()%!%4%+(/!+#'+!<'%!/01(2(1!8%$*3!
M)0/(+#(8%B!
)*#+,-!K%+(!')+$30!'&)(%(*+'!8/'!/(+010203$'!,-.!1(!1(%(*7027                               $/(*+0!1(!
%$%+(/'%! /82+$E'3(*+(%! N8(! 8+$2$O'! 1(! /01(20%! (/! 1                                   $5()(*+(%! *P7($%! 1(!
'9%+)'QR0;! &')+$*10! 1'! (%&(:$5$:'QR0! 10! %$%+(/';! (! '&S%! 8/! :0*T8*+0! 1(!
)(3)'%! 1(! +)'*%50)/'QU(%! (*+)(! /01(20%;! :#(3')! '+V! '! :01$5                          $:'QR0! 1'!
&2'+'50)/'!1(!(I(:8QR0!=.6>?@,0$%(AB!.!/(+010203                                            $'!8+$2$O'!0!C.,D!:0/0!
/01(20! $*1(&(*1(*+(! 1(! &2'+'50)/';! N8(! V! 8/! /(+'E/01(20! N8(! )(W*(! 0%!
:0*:($+0%! 1(! 1$7                                                                          ()%'%! /(+010203$'%! 1(! 1(%(*7027                                       $/(*+0! 1(! %$%+(/'%! /82+$E
'3(*+(%! (/! 8/! W*$:0! /01(20B! F0/0! /01(20! (%&(:P5$:0! 1(! &2'+'50)/'! 50               $!
(%:02#$10!0!/01(20!='F',0B!.%!+)'*%50)/'QU(%!(*+)(!0!/01(20!$*1(&(*1(*+(!
1(! &2'+'50)/'! (! 0! /01(20! (%&(:P5                                                       $:0! 1(! &2'+'50)/'! %R0! &)03)'/'1'%! *'!
2$*38'3(/!GH"!(!'%!+)'*%50)/'QU(%!(*+)(!0!/01(20!(%&(:P5                                    $:0!1(!&2'+'50)/'!
(! '! :01$5                                                                                 $:'QR0! 1'! &2'+'50)/'! 1(! (I(:8QR0! %R0! &)03)'/'1'%! *'! 2$*38'3(/!
,J"B!K%+(! +)'9'2#0!'&)(%(*+';! +'/9V/;! 8/!'/9$(*+(! 1(! 1(%(*7027                         $/(*+0! 1(!
%$%+(/'%! /82+$E'3(*+(%;! N8(! :0*%$%+(! 1(! 8/! :0*T8*+0! 1(! &283E$*%! &')'! '!
&2'+'50)/'! 1(! 1(%(*7027$/(*+0! K:2                                                        $&%(! (! 0! %$%+(/'! L021! ,$*()%! N8(! 50$!
/01(2'10!8%'*10!M)0/(+#(8%B!
=A                                                                                          B3'0()7CD($
Agentes são componentes autônomos e cognitivos, originados da inteligência
artificial, situados em um ambiente e não são receptores passivos de ações executadas
por outras entidades, pois possuem uma biblioteca de planos com possíveis ações em
resposta aos estímulos percebidos com a finalidade de atingir seus objetivos de projeto e
308




modificar o ambiente em que estão inseridos [Wooldridge, 2000].
As  metodologias  de  desenvolvimento  de  Sistemas  Multi-Agentes                        (SMA)
consistem em uma coleção de modelos para formalizar e entender o sistema modelado
antes de sua implementação. Esses modelos começam com uma tentativa de serem os
mais  abstratos  possíveis  até  atingirem  um  nível  mais  próximo  da implementação.
Existem diversas metodologias orientadas a agentes como Tropos [Cossentino, 2005] e
Prometheus [Padgham; Winikoff, 2004].
No desenvolvimento de SMA, ao se utilizar de uma metodologia existente para
modelar um sistema orientado a agentes e implementá-lo usando uma linguagem de
programação específica, de forma não automática, uma série de problemas podem ser
gerados relacionados à engenharia de software, como a lentidão no processo de desen-
volvimento dos produtos de software; a não confiabilidade na transformação da mode-
lagem para o código-fonte; e o desenvolvimento passíveis de erros humanos.
Portanto, para auxiliar na análise e desenvolvimento de SMA, existem diversas
plataformas de desenvolvimentos que geram codificação automatizada a partir de uma
linguagem de modelagem específica para determinada linguagem de programação ori-
entada a agente, como o Prometheus Development Toolkit  (PDT)  [Sun; Padgham,
2010], INGENIAS Development Kit (IDK) [Gomez-Sanz et al., 2008] e PASSI Toolkit
(PTK) [Cossentino; Potts, 2002]. Contudo, tais plataformas geram um atrelamento entre
a linguagem de modelagem e a linguagem de programação, limitando o desenvolvedor
na escolha da metodologia e linguagem para o desenvolvimento do SMA. E ainda, al-
gumas tecnologias não permitem a agregação de novas funcionalidades, por não utiliza-
rem arquiteturas reutilizáveis.
Para superar os problemas de geradores de código para linguagens de modela-
gens específicas é importante a utilização de meta-modelos. A Arquitetura Orientada a
Modelos (Model Driven Architecture - MDA) é uma arquitetura que permite a criação
de soluções de software utilizando meta-modelos que separam a especificação indepen-
dente de modelo computacional da implementação em plataformas específicas [Mellor,
2004].
O objetivo desse trabalho é a criação de uma metodologia para desenvolvimento
de SMA que utiliza a abordagem de desenvolvimento orientado a modelos para a gera-
ção de código semi-automático para as linguagens de programação orientada a agentes
Jason [Bordini et al., 2007] e o modelo organizacional Moise+ [Hubner et al., 2002]. A
abordagem utiliza o Fame Agent-oriented Modeling Language   (FAML), como o mode-
lo independente de plataforma e o modelo baseado no JaCaMo [Boissier et al., 2011],
formado pelas linguagens Jason, Moise+ e Cartago como modelo específico de plata-
forma. O FAML é um meta-modelo genérico que reúne os conceitos das linguagens de
modelagens mais utilizadas na especificação de SMA,
A abordagem proposta permitirá a utilização de uma linguagem de modelagem
que seja aderente ao FAML, e através de um conjunto de transformações na especifica-
ção Query-View-Transformation  (QVT), realizar a transição da especificação para a
plataforma específica de desenvolvimento SMA. Após o modelo da plataforma especí-
fica estiver instanciado, um conjunto de transformações realizará a transição da plata-
forma específica de desenvolvimento SMA para a codificação semi-automática da plata-
forma JASON/Moise+ usando a especificação Model-To-Text  (M2T). A abordagem
ainda utilizará a linguagem Object Constraint Language (OCL) da OMG, para restrição
309




e validação dos modelos FAML e JaCaMo. Este artigo está estruturado da seguinte
forma: a seção 2 apresentará a metodologia proposta; a seção 3 será apresentado um
exemplo completo; na seção 4 estarão os trabalhos relacionados; e por último a seção 5
apresenta a conclusão.
!"                                                                                         #$%&'&(&)*+,-.&/&0%+,
Esta seção apresenta a extensão da metodologia de desenvolvimento de SMA proposta
por Pantoja e Choren (2012) que utiliza a Arquitetura Orientada a Modelos e divide o
desenvolvimento de um SMA em diferentes níveis de abstração partindo de um modelo
de especificação para uma plataforma específica de desenvolvimento através de um
conjunto de transformações. A figura 1 ilustra os níveis de abstração propostos na me-
todologia.
Figura 1. A metodologia proposta.
O nível de design independente de plataforma descreve uma aplicação de SMA
das perspectivas tanto do nível interno (agente), quanto do nível externo (organização).
O modelo de destino consiste da implementação de conceitos do FAML [Beydoun et
al., 2009], derivados do modelo de especificação, onde, um meta-modelo, composto dos
níveis de ambiente, agente, sistema e definição do agente, foi construído. O FAML é
um meta-modelo genérico para desenvolvimento e especificação de SMA, que combina
diferentes linguagens de modelagem orientadas a agentes dentro do mesmo domínio da
engenharia de software. A intenção é que o FAML forneça um conjunto de conceitos
genéricos úteis para qualquer linguagem de modelagem orientada a agentes e metodolo-
gias, e.g., TAO, Islander, Adelfe, PASSI, Gaia, INGENIAS e Tropos.
O FAML permite a utilização de diferentes linguagens de modelagem orientadas
a agentes, adicionando flexibilidade à especificação e, consequentemente, ao desenvol-
vimento do SMA. No entanto, para que a modelagem adequada seja feita, um conjunto
310




de conceitos devem ser instanciados para que a metodologia funcione. Os conceitos de
modelo, sistema, ambiente e agentes, devem estar presentes na modelagem. O meta-
modelo, baseado no FAML, pode ser visto na figura 2.
As transformações QVT, representadas por t1 na figura 1 recebem como entrada
o modelo FAML instanciado e retornam o modelo JaCaMo instanciado de acordo com o
modelo de especificação do SMA. O meta-modelo JaCaMo adaptado, utilizado como
modelo específico de plataforma na metodologia, reúne os conceitos tanto da dimensão
da programação do agente quanto da programação organizacional, utilizando o Jason e
Moise+. Após a geração do modelo JaCaMo, este pode ser editado antes da transforma-
ção t2.
Figura 2. O meta-modelo FAML.
A metodologia proposta neste artigo utiliza a dimensão organizacional, através
do modelo organizacional Moise+, e a dimensão do agente, através da linguagem de
programação orientada a agentes Jason. A dimensão ambiental utiliza a programação
em Java padrão do Jason para a codificação dos ambientes onde os agentes estarão inse-
ridos. Portanto, algumas modificações foram realizadas no meta-modelo para adaptá-lo
a metodologia.
As modificações realizadas no meta-modelo adaptado deste trabalho consistem
na simplificação da dimensão ambiental e da extensão da dimensão organizacional do
meta-modelo inicial do JaCaMo. Na dimensão ambiental do JaCaMo foi necessário
simplificar o modelo, já que a metodologia proposta utiliza apenas as classes Java para
311




implementação do ambiente do agente, não fazendo o uso de artefatos. A simplificação
consistiu em manter a classe Environment, para representar o ambiente, e a classe Per-
cept pra representação das percepções. Desta forma, não se faz necessário a utilização
do CArtAgO
Na dimensão organizacional uma extensão de relacionamentos entre as classes
são inseridas de forma que a codificação do arquivo organizacional do Moise+ seja es-
truturada levando em consideração as especificações funcionais, estruturais e normati-
vas. A classe Link foi adicionada ao meta-modelo para representar as relações entre
grupos  e  papéis  da  especificação  de  grupos  do  modelo  estrutural.  Um  auto-
relacionamento nomeado supertype foi adicionado a classe Role de forma que a hierar-
quia de papéis possa ser representada. Um auto-relacionamento, nomeado de monito-
ringScheme foi adicionado na classe Scheme de forma que possa ser identificado o es-
quema de monitoração de cada esquema. Outro auto-relacionamento nomeado subGoal
foi adicionado a classe Goal com o objetivo de identificar a hierarquia de metas da es-
pecificação funcional. O meta-modelo proposto da metodologia pode ser visto na figura
3.
Figura 3. A meta-modelo JaCaMo adaptado.
A transformação do modelo de projeto para a plataforma de execução consiste
de um conjunto de transformações entre o modelo JaCaMo e a linguagem de   programa-
ção Jason e Moise+. As transformações são implementadas na linguagem M2T para
geração de artefatos de textos, que utiliza templates e modelos. As transformações, re-
presentadas por t2 (figura 1), são um conjunto de templates que geram as especificações
funcional, estrutural e normativa do Moise+ em conjunto com a codificação Jason dos
agentes, ambiente e sistema. A transformação t2 tem como entrada o modelo instancia-
do do JaCaMo resultante da transformações t1.
312




A transformação t2 ainda apresenta uma extensão para o modelo Unmanned Ae-
rial Vehicle using AgentSpeak (UAVAS) [Hama et al., 2011], que é uma extensão do
Jason para Veículos Aéreos Não Tripulados (VANT) utilizados em simulações e hard-
ware.   A plataforma UAVAS utiliza o Jason para a programação dos agentes que serão
utilizados nos VANT. Porém os conceitos de comunicação são diferentes na plataforma.
O envio e o recebimento de mensagens são feitos através de formatos diferentes. A co-
municação do Jason normal utiliza para envio de mensagens as ações internas .send e
.broadcast, enquanto que o Jason da plataforma UAVAS utiliza as ações externas re-
quest, inform, ask e ack.
Dessa forma, se faz necessário, para atender os conceitos de comunicação para o
modelo UAVAS, estender as transformações t2. Quando o sistema for identificado co-
mo Jason, a comunicação levará em conta os conceitos .send e .broadcast, caso contrá-
rio, e este for identificado como UAVAS, as informações de envio de mensagens serão
realizadas utilizando através do request, inform, ask e ack.
!"# $$%&'()''*+$
A metodologia proposta permite ao desenvolvedor algumas facilidades no processo de
desenvolvimento de software. Ao utilizar a abordagem MDA, a rastreabilidade entre o
código gerado e o sistema modelado pode ser garantido já que a transformação do mo-
delo independente de plataforma e o modelo de plataforma de execução garante que os
conceitos presentes na modelagem serão formalmente transformados para os conceitos
da linguagem de programação.
Da mesma forma, a codificação gerada estará em conformidade com o sistema
modelado, pois a automatização do desenvolvimento de software utilizando o processo
MDA, não permite que os conceitos sejam confundidos ou interpretados de forma erra-
da pelo desenvolvedor que adotar um processo não-automatizado direto da especifica-
ção para a plataforma de execução, que em contrapartida apresentam um ciclo de de-
senvolvimento mais rápido por não precisarem de uma série de transformações entre
seus modelos.
A transformação entre o modelo de especificação e o modelo de projeto é reali-
zado por um conjunto de transformações QVT, que é uma linguagem para transforma-
ções entre modelos padronizada da OMG com base na OCL. A transformação entre o
modelo de projeto e a plataforma de execução utiliza o M2T, que é uma especificação
para geração de artefatos de texto e também é padronizada pela OMG. A metodologia
ainda prevê validações dos modelos independentes e específicos de plataforma através
de regras para restringir os modelos utilizando a OCL, de forma que as instâncias dos
modelos sejam o mais consistente possível durante o processo de transição entre os mo-
delos.
,"                                                                                       -.+/0$12   $3+4(2&5+$
Esta seção apresenta um exemplo da metodologia proposta, utilizando as linguagens de
modelagem orientada a agentes Prometheus. Um ambiente de desenvolvimento, que
consiste de plugins para o ambiente de desenvolvimento Eclipse foi implementada utili-
zando a ferramenta Ecore do Eclipse Modeling Framework (EMF) para implementação
dos meta-modelos FAML e JaCaMo; as transformações QVT foram implementadas
313




utilizando o M2M do EMF; e os templates em M2T foram implementados utilizando o
gerador de artefatos de textos Acceleo.
O sistema Gold Miners é um SMA no qual quatro agentes procuram ouro dentro
de um ambiente com obstáculos e eles precisam se comunicar para coletar o maior nú-
mero possível de peças de ouro e levá-las até um depósito central. O SMA possui dois
tipos de agentes: Leader e Miner. O agente Leader é responsável por liderar, orientar e
designar aos outros agentes as tarefas de coleta das peças de ouro através das metas al-
locate quadrant e allocate gold. A mensagem com a informação do quadrante qua-
drant(X1,Y1,X2,Y2) é enviada ao agente Miner após este enviar sua posição inicial i-
nit_pos(X,Y). Da mesma forma que a mensagem allocated(Gold, Ag) é enviada ao agen-
te Miner, quando este avisa através da mensagem gold(X,Y) que encontrou uma peça de
ouro e negocia o direito de recolher uma determinada peça enviando a mensagem
bid(VI).
O agente Miner informa as posições das peças de ouros encontradas para os de-
mais agentes no sistema e negocia com o agente Leader a possibilidade de coletar de-
terminada pela de ouro dependendo de fatores como distância e disponibilidade. Além
disso, o agente Miner ainda possui a meta handle gold, no qual as ações pick, drop e
move, que são responsáveis pela movimentação do agente, são executadas dependendo
das crenças carrying gold, cell(X,Y,gold), free e gold_location; a meta scan gold onde
através da crença de posicionamento pos(X,Y) e last checked executa a ação move; a
meta inform location onde a localização é enviada ao agente Leader. As mensagens
committed_to(Gold) e picked(Gold) são enviadas aos outros agentes Miner.
A figura 4 representa o diagrama do agente Leader, onde três mensagens são re-
cebidas e duas enviadas ao agente Miner; uma crença e duas metas para serem atingidas
podem ser observadas.
!
Figura 4. A modelagem do agente Leader.
A figura 5 representa o diagrama do agente Miner, onde duas mensagens são re-
cebidas do agente Leader e três recebidas do agente Miner; cinco mensagens enviadas;
crenças, metas e um conjunto de ações para atingir as metas de projeto.
A comunicação entre os agentes do sistema é representada através do diagrama de ativi-
dades, que mostra a troca de mensagens entre os agentes Miner e Leader. O agente Mi-
ner envia a mensagem committed_to(Gold) em resposta a mensagem recebida qua-
drant(X1,Y1,X2,Y2). O agente Leader envia a mensagem quadrant(X1,Y1,X2,Y2) em
resposta a mensagem init_pos(X,Y), para informar ao agente Miner a posição em que ele
deve procurar peças de ouro; e envia a mensagem allocated(Gold, Ag) para alocar as
peças de ouro a determinado agente, em resposta as mensagens gold(X,Y) e bid(VI), que
informam ao agente Leader o posicionamento das peças de ouro encontradas e os pedi-
314




dos de poder carregá-las até o depósito. A figura 6 exibe os diagramas de atividades dos
agentes.
!
Figura 5. A modelagem do agente Miner.
Uma instância do meta-modelo FAML, baseado na modelagem do sistema Gold
Miners, utilizando a ferramenta Ecore pode ser vista na figura 7.
!
Figura 6. Os diagramas de atividades dos agentes.
!
Figura 7. A instância do meta-modelo FAML no Ecore.
315




Após as transformações QVT serem executadas, a instância do modelo JaCaMo
é gerada e as transformações M2T são executadas para que a codificação semi- automá-
tica JASON/Moise+ seja gerado. A figura 8 apresenta o código JASON gerado pela
ferramenta.
Figura 8. O código Jason gerado pela ferramenta.
!"                                                                                            #$%&%'()*+,-'%./)0%1)*++
"#$%&!$#'()!$#*()!&+*#$#,%&-)$!&./0,$!%*&1&.2)                                                $!*#.&34),&-)$!50#!&1)*-&6!&!/#*&'()!-#!
37-4/)! &0%)68%43)! 0%4.49&,-)! &! )*4#,%&'()! &! &/#,%#$:! ;! <"=>"<?@! !"#"$%&'"()* +,)!
A<BCD!E!06&!F#**&6#,%&!+&*&!&,8.4$#G!-#$4/,!#!3)-4F43&'()!-#!@H?!50#!/#*&!3)-4F43&'()!
&0%)68%43&! +&*&! &! .4,/0&/#6! -#! +*)/*&6&'()! )*4#,%&-&! &! &/#,%#$! I&-#G! 0$&,-)! &!
6#%)-).)/4&!<"=>"<?@G!+&*%4,-)!-#!0%4.49&'()!-&!JHK!#!-#!06&!,)%&'()!+&*%430.&*:!?!
/#*&'()! -#! 37-4/)! +&*&! )! I&-#! E! *#&.49&-)! &%*&LE$! -#! 06! 6#3&,4$6)! 50#! 0%4.49&!
)"'&$-)".:!;! <BC!0%4.49&!06!#-4%)*!L4$0&.!3)6!)+'M#$!-#!%#$%#!#! -#10/!+&*&!F&34.4%&*!)!
-#$4/,!#!&!46+.#6#,%&'()!-)!@H?:!!
                                                                                                                                                                                                                                                                                                                 ?!F#**&6#,%&! +#*64%#!&)! -#$#,L).L#-)*! 6)-#.&*! )! @H?! )+%&,-)! +#.&!JHK! )0!
                                                                                                                                                                                                                  +#.&!6#%)-).)/4&! <"=>"<?@:!?!6)-#.&/#6!E!F#4%&!&!+&*%4*!-&!3*4&'()!-#!06!3),N0,%)!
-#!                                                                                           -4&/*&6&$!                                 -4$+),414.49&-)                                                                                                                                                         $!                                                                                 +#.&!  F#**&6#,%&!                                3)6)O!  &614#,%#G!   3)6+),#,%#G!
                                                                                                                                                                                                                  )*/&,49&'()G!%&*#F&G!&%4L4-&-#$!#!&/#,%#$:!?!/#*&'()!-&!3)-4F43&'()!#6!I?B>!E!*#&.49&-&!
                                                                                                                                         &%*&LE$! -)! 6#,0! H)-0.#$! ),-#! )$! )"'&$-)".! +)-#6! $#*! #P#30%&-)                                                                                                                                                                                                                                                            $:! ?+#$&*! -)! <BC!
                                                                                                                                                                                                                  0%4.49&*! )! HB?! +&*&! /#*&'()! -#! 3)-4F43&'()G! #.#! ,()! 0%4.49&! 06! 6#%&Q6)-#.)! 3)6)!
                                                                                                                                                                                                                  +.&%&F)*6&!#!E!&%*#.&-)!&)!6)-#.)!<"=>"<?@!#!/#*&!&!3)-4F43&'()!&+#,&$!&!.4,/0&/#6!
-#!+*)/*&6&'()!I?B>:!!
                                                                                                                                                                                                                                                                                                                 ;! R*)6#%2#0$! B#L#.)+6#,%! S)).T4%! ARBSD! E! 06&! F#**&6#,%&! 50#! $0+)*%&! )!
-#$#,L).L46#,%)!                                                                                                                         -#!                                                                      @H?G!  0%4.49&,-)!  &!                                                                                                                                                                                 6#%)-).)/4&!  R*)6#%2#0$G!                        50#!                   )F#*#3#!
316




!"#$%$&"&'() *"+") ,'+"-./)&') #/&$!$#"-./) "01/231                                            $#") *"+")") %$4,0",'2)&') *+/,+"2"-./)
/+$'41"&")")",'41'() 5"#67)8) !'++"2'41") *'+2$1')")                                           $41',+"-./) #/2) /01+"() %$4,0",'4()&')
2/&'%",'2)") !$2)&') !"#$%$1"+) /)&'('49/%9$2'41/)&/) :;87) <) =>?) 01                         $%$@") /)A;B)') /)
A#/+') *"+") /)&'('49/%9$2'41/)&') 02) 2'1"C2/&'%/) #D"2"&/) =+/2'1D'0()A#/+') ;'1"C
;/&'%) E=A;;F) ') /) G;B) *"+") ") #+$"-./) &') 02") !'++"2'41") ,+3!$#") H"('"&") 4")
2'1/&/%/,$") =+/2'1D'0(7) 8) 1'#4/%/,$") 5"9") A2$11'+) ?'2*%"1'() I) 01                       $%$@"&") *"+") ")
,'+"-./)$41'+2'&$3+$")&')#J&$,/7)
K/410&/) /) =>?) (/2'41') *'+2$1')") ,'+"-./)&') #J&$,/) *"+")") *%"1"!/+2") 5"#6L)
"1+'%"4&/)")!'++"2'41")")02")*%"1"!/+2")&')'M'#0-./7):')!/+)4'#'((3+$")")$41',+"-./)&')
/01+") %$4,0",'2) &') 2/&'%",'2) "/) =>?L) I) /H+$,"1J+$/) ")                                  $2*%'2'41"-./) &') 2'1"C
2/&'%/() ') +',+"() &') 1+"4(!/+2"-N'() '41+') '%'(7) 8) !'++"2'41") =>?) 4./) 01$%$@") ")
"H/+&",'2) ;>8L) 1'4&/) "*'4"() 02) 2'1"C2/&'%/) '(*'#O!$#/) *"+") (0") 2'1/&/%/,$"L) /)
=A;;7))
<) =8::P) ?//%6$1) I) 02") !'++"2'41")Q0') *+/*N') 02) +'!$4"2'41/) *"((/)") *"((/)
&'(&') /() +'Q0$($1/()"1I)") #/&$!$#"-./L) #/2*$%"4&/) /()&$",+"2"()&") 2'1/&/%/,$") =8::P)
*"+")#/&$!$#"-./)5"#67)=/+)4./)0("+)")"H/+&",'2);>8L)")+'(*/4("H$%$&"&')&") ,'+"-./)
&/) #J&$,/) I) &") !'++"2'41") 8,'41B"#1/+R7) 8) !'++"2'41") =8::P) I) 02) *%0,C$4) *"+") /)
*+/,+"2") &') 2/&'%",'2) S"1$/4"%) S/(') ') 4./) 01                                            $%$@") 02) 2'1"C2/&'%/) /+$'41"&/) ")
",'41'()!"@'4&/)#/2)Q0')/)#J&$,/)('T"),'+"&/)&$+'1/)&/)2/&'%/)*"+")/)#J&$,/L)"%I2)&')
4./)'(1"+)*+'*"+"&")*"+")"#'$1"+)/01+"()%$4,0",'4()&')2/&'%",'4(7)))
8)2'1/&/%/,$")*"+")&'('49/%9$2'41/)&'):;8)*+/*/(1")4'(1')1+"H"%D/)01                           $%$@")02)
2'1"C2/&'%/),'4I+$#/L)/)B8;UL)Q0')*/(($H$%$1")"/)&'('49/%9'&/+)'(#/%D'+)")%$4,0",'2)
&')2/&'%",'2)&'):;8)Q0')!/+)2"$()"*+/*+$"&")"()(0"()4'#'(($&"&'(L)9$(1/)Q0')/)2'1"C
2/&'%/) +'V4') /() #/4#'$1/() &"() *+$4#$*"$() %$4,0",'4() &') 2/&'%",'2) ') 2'1/&/%/,$"()
/+$'41"&") ") ",'41'() '2) 02) V4$#/) 2/&'%/7) 8%I2) &$((/L) *'+2                              $1') ")                                                                     $41',+"-./) &"()
%$4,0",'4() &') 2/&'%",'4() ') 2'1/&/%/,$"() Q0') ('T"2) "&'+'41'() "/) B8;U) ('2)
4'#'(($&"&')&')                                                                                $2*%'2'41"-./)&') 4/9"() +',+"()&') 1+"4(!/+2"-N'(L)T3)Q0') /) 4V#%'/)&")
1+"4(!/+2"-./)=P;)*"+")=:;)T3)'(13)&'!$4$&/7))
>")2'(2")!/+2"L)")2'1/&/%/,$")*'+2$1')1"2HI2)"),'+"-./)&')#/&$!$#"-./)('2                      $C
"01/231$#") *"+") /01+"() %$4,0",'4() &') *+/,+"2"-./L) "%I2) &/) 5"(/4) ') &/) ;/$('W)
01$%$@"&"()"10"%2'41'L) */$() 01                                                               $%$@")")"H/+&",'2)&") ;>8L)&$9$&$4&/) /()&$9'+(/() 4O9'$()
&')"H(1+"-./)&/)&'('49/%9$2'41/)&/) ($(1'2")'2) 2/&'%/()                                       $4&'*'4&'41'()'41+') ($7)A((")
#/&$!$#"-./)I)!'$1")*"+1$4&/)&/)B8;UL)*"(("4&/)*/+)02)#/4T041/)&')1+"4(!/+2"-N'()"1I)
#D',"+) X) *%"1"!/+2") &') 'M'#0-./) &/) :;87) 8) 2'1/&/%/,$") 01$%$@") ") %$4,0",'2) &')
*+/,+"2"-./)5"(/4)')/)2/&'%/)/+,"4$@"#$/4"%);/$('WL)Q0')01                                     $%$@"2)")"+Q0$1'10+")Y>PL)
*"+")%$&"+)#/2)#/4#'$1/()&')/+,"4$@"#$/4"$()')"2H$'41"$(7))
                                                                                               8)  2'1/&/%/,$")                                                            4./)                                                                                          */((0$)   02")  !'++"2'41")   ,+3!$#")  '(*'#O!$#")   *"+")  "()
                                                                                                                                                                           2'1/&/%/,$"()"&'+'41'()"/)B8;UL) */+I2)") 2'1/&/%/,$") *+/*/(1") *'+2$1')")                                                                         $41',+"-./)
                                                                                                                                                                           &"()  !'++"2'41"() T3) 'M$(1'41'() "/)  2'1"C2/&'%/) "&"*1"&/) &/) B8;U) "1+"9I() &')
                                                                                                                                                                           1+"4(!/+2"-N'()'41+') 2/&'%/()')") #+$"-./)&')"2H$'41'() *+J*+$/() 01$%$@"4&/) /)G;B7)8)
                                                                                                                                                                           1"H'%") Z) "*+'('41") 02) #/2*"+"1$9/) '41+') ") 2'1/&/%/,$") *+/*/(1") ') "() !'++"2'41"()
'M$(1'41'()4")"10"%$&"&'7))
)
)
317




Tabela 1. Comparativo das ferramentas.
!"                                                                                        #$%&'()*$++
Este trabalho desenvolveu uma metodologia MDA para geração de SMA a partir de
linguagens e metodologias aderentes ao meta-modelo FAML. O FAML foi utilizado
como PIM pois ele reúne os conceitos de diversas metodologias orientadas a agentes em
um único meta-modelo. Como PSM foi utilizada a plataforma JaCaMo, que integra as
linguagens JASON, Moise+ e CArtAgO. Para permitir as transformações entre os mo-
delos, foi necessário desenvolver um meta-modelo baseado nos conceitos do JaCaMo,
onde a dimensão do agente e da organização tem uma importância maior, visto que o
modelo da plataforma de execução não precisa de artefatos para o seu funcionamento.
As regras de transformações entre o modelo de especificação e o modelo de pro-
jeto foram desenvolvidas utilizando a linguagem QVT padronizada pela OMG. Em se-
guida, um conjunto de regras de transformações entre o modelo de projeto e a platafor-
ma de execução foi desenvolvido utilizando a linguagem M2T da OMG. A M2T foi
utilizada por ser uma linguagem que utiliza templates para geração de artefatos de tex-
tos, que faz a geração parcial do código do SMA modelado a partir da instância do me-
ta-modelo gerado pelas transformações M2T.
Foi criado um ambiente de desenvolvimento a agentes para o Eclipse, onde os
meta-modelos da metodologia foram construídos utilizando-se a ferramenta Ecore   inte-
grante do Eclipse Modeling Framework (EMF). As transformações em QVT foram im-
plementadas utilizando-se o M2M e as transformações em M2T foram implementadas
utilizando o Acceleo, que é um gerador de artefatos de textos para o Eclipse. Um exem-
plo utilizando a metodologia e o ambiente desenvolvido foi apresentado: o sistema Gold
Miners que foi modelado na linguagem de modelagem Prometheus.
Apesar da metodologia não possuir uma parte de modelagem gráfica, a sua utili-
zação facilita o processo de desenvolvimento do sistema já que permite ao desenvolve-
dor do sistema optar pela metodologia orientada a agentes que mais lhe for familiar,
desde que esta seja aderente ao meta-modelo FAML. A metodologia garante a rastreabi-
lidade dos conceitos gerados e dos conceitos modelados, por utilizar um conjunto de
transformações entre modelos conforme a arquitetura MDA, garantindo assim, que a
codificação gerada está em conformidade com o sistema modelado. Da mesma maneira,
o processo de gestão de mudanças no software é facilitado, de forma que o desenvolve-
dor invista na modelagem do sistema para atingir a modificação necessária no código.
Como trabalhos futuros, o desenvolvimento de um ambiente gráfico para mode-
lagem de SMA com as metodologias aderentes ao FAML permitirá uma versatilidade e
aplicabilidade maior à ferramenta do ponto de vista do desenvolvedor. Além disso, um
ambiente gráfico permitirá ao desenvolvedor utilizar diagramas de modelagens diferen-
tes, pois essas estarão unificadas graficamente em uma mesma ferramenta. Também será
318




desenvolvida a geração de codificação automática para outras plataformas específicas
como o Jade/Jadex.
!"                                                                                        #$%$&'()*+,-.*/0*12&3%*)+,--
Beydoun, G., Low, G., Henderson-Sellers, B., Mouratidis, H., Gomezsanz, J. J., Pavon,
J. e Gonzalez-Perez, C. (2009) ³FAML: a generic metamodel for MAS develop-
ment.´ IEEE Trans. Softw. Eng.
Boissier, O., Bordini, R. H., Hubner, J. F., Ricci, A. e Santi, A. (2011) ³Multi-agent
orientHG SURJUDPPLQJ ZLWK MDFDPR´ Science of Computer Programming.
Bordini, R. H., Hubner, J. F. e Wooldridge, W. (2007) ³Programming Multi-Agent
Systems in AgentSpeak using Jason´ Jonh Wiley and Sons, London.
Cossentino, M. (2005) ³From Requirements to Code with the PASSI Methodology´
Em SELLERS, H. B. e GIORGINI, P., editores, Agent-Oriented Methodologies,
volume 3690 of LNCS, p_ags. 79{106. Idea Group Pub.
Cossentino, M. e Potts, C.                                                                ³A CASE tool supported methodology for the design
of multi-agent systems´.
Gomez-Sanz, J. J., Fuentes, R., Pavon, J. e Garcia-Magarino, I. (2008) ³Ingenias devel-
opment kit: a visual multi-agent V\VWHP GHYHORSPHQW HQYLURQPHQW´, In Proceedings
of the 7th international joint conference on Autonomous agents and multiagent sys-
tems: demo papers, AAMAS '08, Richland, SC.
Hama, M. T. ; Allgayer R. S. ; Pereira, C. E. ; Bordini, R. H. (2011) ³UAVAS: An Agent
Oriented   Infrastructure   for   Unmanned   Aerial   Vehicles   Development´   In:
AutoSoft@CBSoft, 2011, São Paulo. II Workshop sobre Sistemas de Software Autô-
nomos. São Paulo : CBSoft, v. 10. p. 15-21.
Hubner, J. F., Sichman, J. S. A. e Boissier, O. (2                                        ³A model for the structural, func-
tional, and deontic specification of orgaQL]DWLRQV LQ PXOWLDJHQW V\VWHPV´                 ,Q Proceed-
ings of the 16th Brazilian Symposium on Artificial Intelligence: Advances in Artifi-
cial Intelligence, SBIA '02, London, UK. Springer-Verlag.
Mellor, S.                                                                                ³Mda Distilled: Principles of Model-Driven Architecture´  Addison
Wesley Object Technology Series, Addison-Wesley.
Padgham, L. e Winikoff, M.                                                                ³Developing Intelligent Agent Systems: A Practical
Guide´ Wiley Series in Agent Technology, John Wiley.
Pantoja, C. E. e Choren, R.                                                               ³A mda approach for agent-oriented development
using faml.´ ,Q ICEIS 2012 - Proceedings of the 14th International Conference on
Enterprise Information Systems, Volume 2, Wroclaw, Poland, 28 June - 1 July, 2012,
SciTePress.
Sun, H., Thangarajah, J. e Padgham, L. (2010) ³Eclipse-EDVHG SURPHWKHXV GHVLJQ WRRO´
In Proceedings of the  9th International Conference on Autonomous Agents and
Multiagent Systems: volume 1 - Volume 1, AAMAS '10, Richland, SC.
Wooldridge, M. (2000) ³Reasoning about rational agents´  Intelligent robotics and au-
tonomous agents, MIT Press.
319





